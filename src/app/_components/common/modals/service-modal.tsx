'use client';

import SvgX from '../../icons/M/X';
import CustomButton from '../custom-button';

interface ServiceModalProps {
  onClose: () => void;
  serviceType:
    | 'error'
    | 'loginRequired'
    | 'stopChallenge'
    | 'aboutToExpire'
    | 'extendDeadline'
    | 'challengeFail'
    | 'selectMainChallenge';
}

export default function ServiceModal({
  onClose,
  serviceType,
}: ServiceModalProps) {
  const modalContent = {
    error: {
      image: '/assets/modal-image/service_error.webp',
      title: 'ÌîºÏñ¥ÌéôÌä∏ ÏÑúÎπÑÏä§ Ïò§Î•ò',
      description: [
        'ÏòàÏÉÅÌïòÏßÄ Î™ªÌïú Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.',
        'Ïû†Ïãú ÌõÑ Îã§Ïãú Ïù¥Ïö©Ìï¥ Ï£ºÏÑ∏Ïöî.',
      ],
      buttons: [
        {
          text: 'ÌôïÏù∏',
          color: 'purple',
          onClick: onClose,
        },
      ],
    },
    loginRequired: {
      image: '/assets/modal-image/login_required.webp',
      title: 'Ïïó! Î°úÍ∑∏Ïù∏Ïù¥ ÌïÑÏöîÌï¥Ïöî',
      description: [
        'Î°úÍ∑∏Ïù∏ÌïòÍ≥† Îçî ÎßéÏùÄ Í∏∞Îä•ÏùÑ ÎßåÎÇòÎ≥¥ÏÑ∏Ïöî!',
        'ÌöåÏõêÏù¥ ÏïÑÎãàÏã†Í∞ÄÏöî? ÏïÑÎûò ÌöåÏõêÍ∞ÄÏûÖ Î≤ÑÌäºÏúºÎ°ú ÏãúÏûëÌïòÏÑ∏Ïöî.',
      ],
      buttons: [
        {
          text: 'Î°úÍ∑∏Ïù∏ÌïòÎü¨ Í∞ÄÍ∏∞',
          color: 'purple',
          onClick: () => console.log('Î°úÍ∑∏Ïù∏ ÌÅ¥Î¶≠'),
        },
        {
          text: 'ÌöåÏõêÍ∞ÄÏûÖ',
          color: 'outline-purple',
          onClick: () => console.log('ÌöåÏõêÍ∞ÄÏûÖ ÌÅ¥Î¶≠'),
        },
      ],
    },
    stopChallenge: {
      image: '/assets/modal-image/stop_challenge.webp',
      title: 'Ï±åÎ¶∞ÏßÄÎ•º Ï§ëÎã®ÌïòÏãúÍ≤†Ïñ¥Ïöî?',
      description: ['Î™©ÌëúÍπåÏßÄÏùò ÏãúÍ∞ÑÎ≥¥Îã§ ÎèÑÏ†Ñ ÏûêÏ≤¥Í∞Ä Ï§ëÏöîÌï¥Ïöî!'],
      buttons: [
        {
          text: 'ÏïÑÎãàÏöî, Í≥ÑÏÜç ÎèÑÏ†ÑÌï†ÎûòÏöî',
          color: 'purple',
          onClick: () => console.log('Í≥ÑÏÜç ÎèÑÏ†Ñ ÌÅ¥Î¶≠'),
        },
        {
          text: 'ÎÑ§, Ï§ëÎã®Ìï†Í≤åÏöî',
          color: 'outline-purple',
          onClick: () => console.log('Ï§ëÎã® ÌÅ¥Î¶≠'),
        },
      ],
    },
    aboutToExpire: {
      image: '/assets/modal-image/about_to_expire.webp',
      title: '[ÏÇ¨Ïö©Ïûê Ïù¥Î¶Ñ]ÎãòÏùò ÎèÑÏ†ÑÏù¥ ÏôÑÎ£åÎêòÍ∏∞ ÏßÅÏ†ÑÏûÖÎãàÎã§!',
      description: [
        'ÏïàÎÖïÌïòÏÑ∏Ïöî, [ÏÇ¨Ïö©Ïûê Ïù¥Î¶Ñ]Îãò!',
        'ÎèÑÏ†ÑÌïòÍ≥† ÏûàÎäî [Ï±åÎ¶∞ÏßÄ Ïù¥Î¶Ñ]Ïùò Í∏∞ÌïúÏù¥ [ÎÇ†Ïßú]Ïóê Ï¢ÖÎ£åÎê† ÏòàÏ†ïÏûÖÎãàÎã§.',
        'üí™ Í∏∞Ìïú Ïó∞Ïû•ÌïòÍ∏∞ Î≤ÑÌäºÏùÑ ÌÅ¥Î¶≠Ìï¥ Ïó∞Ïû•ÏùÑ ÏôÑÎ£åÌï¥Î≥¥ÏÑ∏Ïöî.',
      ],
      buttons: [
        {
          text: 'Í∏∞Ìïú Ïó∞Ïû•ÌïòÍ∏∞',
          color: 'purple',
          onClick: () => console.log('Í∏∞Ìïú Ïó∞Ïû• ÌÅ¥Î¶≠'),
        },
      ],
    },
    extendDeadline: {
      image: '/assets/modal-image/deadline_extension.webp',
      title: 'Í∏∞Ìïú Ïó∞Ïû• Î™®Îã¨',
      description: [
        '[Ï±åÎ¶∞ÏßÄ Ïù¥Î¶Ñ]Ïù¥(Í∞Ä) [Ï¢ÖÎ£åÏùº]Ïóê ÎßåÎ£åÎê©ÎãàÎã§.',
        'Ï°∞Í∏à Îçî ÏãúÍ∞ÑÏù¥ ÌïÑÏöîÌïòÏã†Í∞ÄÏöî? Í∏∞ÌïúÏùÑ Ïó∞Ïû•Ìï¥ÏÑú Î™©Ìëú Îã¨ÏÑ±ÏùÑ Í≥ÑÏÜç Ïù¥Ïñ¥Í∞ÄÏÑ∏Ïöî!',
      ],
      buttons: [
        {
          text: 'Ïó∞Ïû•ÌïòÍ∏∞',
          color: 'purple',
          onClick: () => console.log('Ïó∞Ïû• ÌÅ¥Î¶≠'),
        },
        {
          text: 'Ï∑®ÏÜå',
          color: 'outline-purple',
          onClick: onClose,
        },
      ],
    },
    challengeFail: {
      image: '/assets/modal-image/challenge_failed.webp',
      title: 'Ïù¥Î≤à ÎèÑÏ†ÑÏùÄ ÏïÑÏâΩÍ≤åÎèÑ Ïã§Ìå®ÌñàÏñ¥Ïöî.',
      description: [
        'Ïó¥Ïã¨Ìûà ÎÖ∏Î†•Ìï¥Ï£ºÏÖ®ÏßÄÎßå, [Ï±åÎ¶∞ÏßÄ Ïù¥Î¶Ñ]Ïù¥(Í∞Ä) Í∏∞Ìïú ÎÇ¥Ïóê ÏôÑÎ£åÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.',
        'Ïã§Ìå®Îäî ÏÑ±Í≥µÏùò Î∞ëÍ±∞Î¶ÑÏù¥Ï£†!',
        'Ïù¥Î≤à Í≤ΩÌóòÏùÑ Î∞ëÌåê ÏÇºÏïÑ ÏÉàÎ°úÏö¥ ÎèÑÏ†ÑÏùÑ ÏãúÏûëÌï¥ Î≥¥ÏÑ∏Ïöî.',
      ],
      buttons: [
        {
          text: 'ÏÉàÎ°úÏö¥ ÎèÑÏ†Ñ ÏãúÏûëÌïòÍ∏∞',
          color: 'purple',
          onClick: () => console.log('ÏÉàÎ°úÏö¥ ÎèÑÏ†Ñ ÏãúÏûë ÌÅ¥Î¶≠'),
        },
        {
          text: 'Ï∑®ÏÜå',
          color: 'outline-purple',
          onClick: onClose,
        },
      ],
    },
    selectMainChallenge: {
      image: '/assets/modal-image/main_challenge_required.webp',
      title: 'Î©îÏù∏ Ï±åÎ¶∞ÏßÄÎ•º Î®ºÏ†Ä ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî!',
      description: [
        '[ÏóÖÎç∞Ïù¥Ìä∏Îê† Ï±åÎ¶∞ÏßÄ Ïù¥Î¶Ñ]Ïóê Ï†ëÍ∑ºÌïòÎ†§Î©¥ Î©îÏù∏ Ï±åÎ¶∞ÏßÄÎ•º Î®ºÏ†Ä ÏÑ§Ï†ïÌï¥Ïïº Ìï©ÎãàÎã§.',
        'Î©îÏù∏ Ï±åÎ¶∞ÏßÄÎäî Î™®Îì† ÎèÑÏ†ÑÏùò Ï§ëÏã¨Ïù¥Î©∞, Î™©Ìëú Îã¨ÏÑ±ÏùÑ ÏúÑÌïú Ï§ëÏöîÌïú ÏãúÏûëÏ†êÏù¥ÏóêÏöî.',
      ],
      buttons: [
        {
          text: 'Î©îÏù∏ Ï±åÎ¶∞ÏßÄ ÏÑ§Ï†ïÌïòÍ∏∞',
          color: 'purple',
          onClick: () => console.log('Î©îÏù∏ Ï±åÎ¶∞ÏßÄ ÏÑ§Ï†ï ÌÅ¥Î¶≠'),
        },
        {
          text: 'Ï∑®ÏÜå',
          color: 'outline-purple',
          onClick: onClose,
        },
      ],
    },
  };

  const content = modalContent[serviceType];

  return (
    <div
      className="fixed inset-0 flex items-center justify-center bg-black/50"
      onClick={onClose}
    >
      <div
        className="relative w-[548px] rounded-2xl bg-white p-6"
        onClick={(e) => e.stopPropagation()}
      >
        <button className="absolute right-8 top-6" onClick={onClose}>
          <SvgX className="size-[24px]" />
        </button>

        <div className="mt-[70px] flex flex-col items-center justify-center">
          <img src={content.image} width={160} alt="modal visual" />
          <h3 className="mt-10 text-h4">{content.title}</h3>
          <div className="mt-3 flex flex-col items-center text-body">
            {content.description.map((line, idx) => (
              <p key={idx} className="py-0.5">
                {line}
              </p>
            ))}
          </div>
          <div className="mt-[48px] flex gap-4">
            {content.buttons.map((button, idx) => (
              <CustomButton
                key={idx}
                color={button.color as 'purple' | 'outline-purple'}
                size={content.buttons.length > 1 ? 'modalSize' : 'large'}
                onClick={button.onClick}
              >
                {button.text}
              </CustomButton>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
}
